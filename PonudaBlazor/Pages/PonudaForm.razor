@page "/ponuda/{Id:guid}"
@page "/ponuda/kreiraj"
@using FrontEnd.FrontEndDomain
@using PonudaBlazor.Components.PonudaComponents
@using ViewModels
@inject NavigationManager NavigationManager;
@inject PonudaFormViewModel PonudaViewModel;

<fieldset disabled=@isDisabled>
    <EditForm Model="@PonudaViewModel.Ponuda" OnValidSubmit="@UnesiPonudu">
        <ObjectGraphDataAnnotationsValidator />
        <ValidationSummary />
        <label>Javni poziv</label>
        <InputSelect @bind-Value="PonudaViewModel.Ponuda.JavniPoziv.Id">
            @foreach (var javniPoziv in PonudaViewModel.JavniPozivi)
            {
                <option value="@javniPoziv.Id">@javniPoziv.Ime</option>
            }
        </InputSelect>
        <label>Ponudjac</label>
        <InputSelect @bind-Value="PonudaViewModel.Ponuda.Ponudjac.Id">
            @foreach (var ponudjac in PonudaViewModel.Ponudjaci)
            {
                <option value="@ponudjac.Id">@ponudjac.Ime</option>
            }
        </InputSelect>
        <label>Status</label>
        <InputSelect @bind-Value="PonudaViewModel.Ponuda.Status">
            @foreach (var status in Enum.GetValues(typeof(StatusPonude)).Cast<StatusPonude>())
            {
                <option value="@status">@status.ToString()</option>
            }
        </InputSelect>
        <label>Informacije O Isporuci</label>
        <InputSelect @bind-Value="PonudaViewModel.Ponuda.InformacijeOIsporuci.Id">
            @foreach (var ioi in PonudaViewModel.InformacijeOIsporuci)
            {
                <option value="@ioi.Id">@ioi.Ime</option>
            }
        </InputSelect>
        <label>Datum pristizanja</label>
        <InputDate @bind-Value="PonudaViewModel.Ponuda.DatumPristizanja"></InputDate>
        <label>Zakonski zastupnik</label>
        <InputText @bind-Value="PonudaViewModel.Ponuda.ZakonskiZastupnik"></InputText>
        <h5>Kontakt osoba</h5>
        <label>Ime</label>
        <InputText @bind-Value="PonudaViewModel.Ponuda.Kontakt.Ime"></InputText>
        <label>Prezime</label>
        <InputText @bind-Value="PonudaViewModel.Ponuda.Kontakt.Prezime"></InputText>
        <label>Email</label>
        <InputText @bind-Value="PonudaViewModel.Ponuda.Kontakt.Email"></InputText>
        <label>Jmbg</label>
        <InputText @bind-Value="PonudaViewModel.Ponuda.Kontakt.Jmbg"></InputText>
        <label>Telefon</label>
        <InputText @bind-Value="PonudaViewModel.Ponuda.Kontakt.Telefon"></InputText>

        <h4>Stavke strukture cene</h4>
        @foreach (var validation in PonudaViewModel.StavkaValidation)
        {
            <p class="text-danger">@validation.ErrorMessage</p>
        }
        <label>Kolicina</label>
        <InputNumber @bind-Value=PonudaViewModel.StavkaStruktureCene.Kolicina></InputNumber>
        <label>Proizvod</label>
        <InputSelect @bind-Value=PonudaViewModel.StavkaStruktureCene.Proizvod.Id>
            @foreach (var proizvod in PonudaViewModel.Proizvodi)
            {
                <option value="@proizvod.Id">@proizvod.Ime</option>
            }
        </InputSelect>
        <label>Jedinicna cena bez PDV</label>
        <InputNumber @bind-Value=PonudaViewModel.StavkaStruktureCene.JedinicnaCenaBezPdv></InputNumber>
        <label>Jedinicna cena sa PDV</label>
        <InputNumber @bind-Value=PonudaViewModel.StavkaStruktureCene.JedinicnaCenaSaPdv></InputNumber>

        @if (!isEditStavke)
        {
            <button type="button" class="btn" @onclick="PonudaViewModel.DodajStavku">Dodaj</button>
        }
        else
        {
            <button type="button" class="btn" @onclick="PonudaViewModel.AzurirajStavku">Azuriraj</button>
        }
        <button type="button" class="btn btn-light" @onclick="OnChangeResetStakva">Odustani</button>
        <StavkaStruktureCeneList StavkeStruktureCene=@PonudaViewModel.Ponuda.StavkeStruktureCene.ToList()
                                 EditStavkuCallback="@OnClickEditStavku"
                                 DeleteStavkuCallback="@OnClickDeleteStavku">
        </StavkaStruktureCeneList>

        <div>
            @foreach (var validation in PonudaViewModel.TekuciValidation)
            {
                <p class="text-danger">@validation.ErrorMessage</p>
            }
            <label>BrojRacuna</label>
            <InputText @bind-Value=PonudaViewModel.TekuciRacunPonudjaca.BrojRacuna></InputText>
            <label>Banka</label>
            <InputSelect @bind-Value=PonudaViewModel.TekuciRacunPonudjaca.Banka.Id>
                @foreach (var banka in PonudaViewModel.Banke)
                {
                    <option value="@banka.Id">@banka.Ime</option>
                }
            </InputSelect>
        </div>
        @if (!isEditTekuceg)
        {
            <button type="button" class="btn" @onclick="PonudaViewModel.DodajTekuci">Dodaj</button>
        }
        else
        {
            <button type="button" class="btn" @onclick="PonudaViewModel.AzurirajTekuci">Azuriraj</button>
        }
        <button type="button" class="btn btn-light" @onclick="OnChangeResetTekuci">Odustani</button>
        <TekuciRacunPonudjacaList TekuciRacuni=@PonudaViewModel.Ponuda.TekuciRacuniPonudjaca.ToList()
                                  EditTekuciCallback="@OnClickEditTekuci"
                                  DeleteTekuciCallback="@OnClickDeleteTekuci"></TekuciRacunPonudjacaList>

        @if (!isDisabled)
        {
            <button type="submit" class="btn btn-primary">Submit</button>
        }

    </EditForm>
</fieldset>
@if (isDisabled)
{
    <button type="button" @onclick="@(e=> isDisabled = false)">Edit</button>
}


@code
{
    [Parameter]
    public Guid Id { get; set; }
    private bool isDisabled = true;
    private bool isEditStavke = false;
    private bool isEditTekuceg = false;
    private EditContext? CurrentEditContext { get; set; }
    protected override async Task OnInitializedAsync()
    {
        isDisabled = Id != Guid.Empty;
        await PonudaViewModel.OnInit(Id);
    }

    private void OnClickEditStavku(Guid id)
    {
        PonudaViewModel.StavkaStruktureCene = PonudaViewModel.Ponuda.StavkeStruktureCene.FirstOrDefault(s => s.Id == id);
        isEditStavke = true;
    }
    private void OnClickDeleteStavku(Guid id)
    {
        PonudaViewModel.Ponuda.ObrisiStavkuStruktureCene(id);
    }
    private void OnClickEditTekuci(Guid id)
    {
        PonudaViewModel.TekuciRacunPonudjaca = PonudaViewModel.Ponuda.TekuciRacuniPonudjaca.FirstOrDefault(t => t.Id == id);
        isEditTekuceg = true;
    }
    private void OnClickDeleteTekuci(Guid id)
    {
        PonudaViewModel.Ponuda.ObrisiTekuciRacunPonudjaca(id);
    }
    private void OnChangeResetStakva()
    {
        PonudaViewModel.StavkaStruktureCene = new();
        isEditStavke = false;
    }
    private async Task UnesiPonudu()
    {
        if(Id == Guid.Empty)
        {
            await PonudaViewModel.KreirajPonudu();

        }
        else
        {
            await PonudaViewModel.AzurirajPonudu();
        }
        NavigationManager.NavigateTo("ponuda");
    }
    private void OnChangeResetTekuci()
    {
        PonudaViewModel.TekuciRacunPonudjaca = new();
        isEditTekuceg = false;
    }
}
